import React, { useEffect, useState } from 'react';
import { Activity, AlertCircle, Shield, Wifi, Cpu, 
  Memory, Server, Bell, Clock } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

export default function MonitoringDashboard() {
  const [metrics, setMetrics] = useState(null);
  const [alerts, setAlerts] = useState([]);
  const [history, setHistory] = useState([]);
  const [wsConnected, setWsConnected] = useState(false);

  useEffect(() => {
    // Inicializar conexión WebSocket
    const ws = new WebSocket(`${process.env.NEXT_PUBLIC_WS_URL}/monitor`);

    ws.onopen = () => {
      setWsConnected(true);
    };

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'metrics') {
        setMetrics(data.metrics);
        setHistory(prev => [...prev, {
          timestamp: new Date(),
          ...data.metrics
        }].slice(-60)); // mantener últimos 60 puntos
      } else if (data.type === 'alert') {
        setAlerts(prev => [data.alert, ...prev]);
      }
    };

    ws.onclose = () => {
      setWsConnected(false);
    };

    // Cargar datos iniciales
    fetchInitialData();

    return () => {
      ws.close();
    };
  }, []);

  const fetchInitialData = async () => {
    try {
      const [metricsRes, alertsRes] = await Promise.all([
        fetch('/api/monitor/metrics'),
        fetch('/api/monitor/alerts')
      ]);

      const [metricsData, alertsData] = await Promise.all([
        metricsRes.json(),
        alertsRes.json()
      ]);

      setMetrics(metricsData);
      setAlerts(alertsData);
    } catch (error) {
      console.error('Error loading monitoring data:', error);
    }
  };

  const handleAcknowledgeAlert = async (alertId) => {
    try {
      await fetch(`/api/monitor/alerts/${alertId}/acknowledge`, {
        method: 'POST'
      });

      setAlerts(prev => 
        prev.map(alert => 
          alert.id === alertId 
            ? { ...alert, acknowledged: true }
            : alert
        )
      );
    } catch (error) {
      console.error('Error acknowledging alert:', error);
    }
  };

  if (!metrics) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" />
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Estado del Sistema */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Cpu className="w-4 h-4" />
              CPU
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold mb-2">
              {metrics.cpu.usage.toFixed(1)}%
            </div>
            <div className="text-sm text-gray-500">
              {metrics.cpu.cores} Cores | {metrics.cpu.temperature}°C
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Memory className="w-4 h-4" />
              Memoria
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold mb-2">
              {((metrics.memory.used / metrics.memory.total) * 100).toFixed(1)}%
            </div>
            <div className="text-sm text-gray-500">
              {(metrics.memory.used / 1024 / 1024 / 1024).toFixed(1)}GB de {(metrics.memory.total / 1024 / 1024 / 1024).toFixed(1)}GB
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Wifi className="w-4 h-4" />
              Red
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold mb-2">
              {metrics.network.activeConnections}
            </div>
            <div className="text-sm text-gray-500">
              ↑ {(metrics.network.outbound / 1024 / 1024).toFixed(1)} MB/s |
              ↓ {(metrics.network.inbound / 1024 / 1024).toFixed(1)} MB/s
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-4 h-4" />
              Seguridad
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold mb-2">
              {metrics.security.threats}
            </div>
            <div className="text-sm text-gray-500">
              {metrics.security.blockedAttacks} ataques bloqueados
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Uso de CPU</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={history}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="timestamp" />
                  <YAxis />
                  <Tooltip />
                  <Line 
                    type="monotone" 
                    dataKey="cpu.usage" 
                    stroke="#8b5cf6" 
                    strokeWidth={2} 
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Uso de Red</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={history}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="timestamp" />
                  <YAxis />
                  <Tooltip />
                  <Line 
                    type="monotone" 
                    dataKey="network.inbound" 
                    stroke="#10b981" 
                    strokeWidth={2} 
                  />
                  <Line 
                    type="monotone" 
                    dataKey="network.outbound" 
                    stroke="#3b82f6" 
                    strokeWidth={2} 
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Alertas */}
      <Card>
        <CardHeader>
          <CardTitle>Alertas Activas</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {alerts
              .filter(alert => !alert.acknowledged)
              .map(alert => (
                <Alert
                  key={alert.id}
                  className={`${
                    alert.severity === 'critical' ? 'bg-red-50 border-red-200' :
                    alert.severity === 'error' ? 'bg-orange-50 border-orange-200' :
                    alert.severity === 'warning' ? 'bg-yellow-50 border-yellow-200' :
                    'bg-blue-50 border-blue-200'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <AlertCircle className={`w-4 h-4 ${
                        alert.severity === 'critical' ? 'text-red-500' :
                        alert.severity === 'error' ? 'text-orange-500' :
                        alert.severity === 'warning' ? 'text-yellow-500' :
