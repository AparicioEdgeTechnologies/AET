import React, { useState, useEffect } from 'react';
import { Brain, Zap, GitBranch, Maximize, Activity, 
  RefreshCcw, Network, Cpu } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';

export default function EvolutionDashboard() {
  const [systemMetrics, setSystemMetrics] = useState(null);
  const [evolutionData, setEvolutionData] = useState([]);
  const [intelligenceMetrics, setIntelligenceMetrics] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeMonitoring = async () => {
      try {
        await connectToEvolutionSystem();
        startRealTimeMonitoring();
      } catch (error) {
        console.error('Error initializing monitoring:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeMonitoring();
  }, []);

  const connectToEvolutionSystem = async () => {
    const ws = new WebSocket(`${process.env.NEXT_PUBLIC_WS_URL}/evolution`);

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      switch (data.type) {
        case 'metrics':
          setSystemMetrics(data.metrics);
          break;
        case 'evolution':
          setEvolutionData(prev => [...prev, data.evolution].slice(-100));
          break;
        case 'intelligence':
          setIntelligenceMetrics(data.intelligence);
          break;
      }
    };
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" />
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto space-y-6">
        <h1 className="text-3xl font-bold mb-8">Sistema de Auto-Evolución</h1>

        {/* Métricas Principales */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-purple-500" />
                Inteligencia
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {intelligenceMetrics?.level}
              </div>
              <div className="text-sm text-gray-500">
                Nivel de IA
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="w-5 h-5 text-blue-500" />
                Evolución
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                Gen {systemMetrics?.generation}
              </div>
              <div className="text-sm text-gray-500">
                Generación Actual
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <GitBranch className="w-5 h-5 text-green-500" />
                Complejidad
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {systemMetrics?.complexity}
              </div>
              <div className="text-sm text-gray-500">
                Nivel de Complejidad
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Activity className="w-5 h-5 text-red-500" />
                Eficiencia
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {systemMetrics?.efficiency}%
              </div>
              <div className="text-sm text-gray-500">
                Eficiencia del Sistema
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Gráficos de Evolución */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Evolución del Sistema</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={evolutionData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="timestamp" />
                    <YAxis />
                    <Tooltip />
                    <Line 
                      type="monotone" 
                      dataKey="intelligence" 
                      stroke="#8b5cf6" 
                      strokeWidth={2} 
                    />
                    <Line 
                      type="monotone" 
                      dataKey="efficiency" 
                      stroke="#10b981" 
                      strokeWidth={2} 
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Métricas de Evolución</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[
                  { label: 'Adaptabilidad', value: systemMetrics?.adaptability, color: 'text-blue-500' },
                  { label: 'Optimización', value: systemMetrics?.optimization, color: 'text-green-500' },
                  { label: 'Aprendizaje', value: systemMetrics?.learning, color: 'text-purple-500' },
                  { label: 'Innovación', value: systemMetrics?.innovation, color: 'text-yellow-500' }
                ].map((metric) => (
                  <div key={metric.label} className="flex items-center justify-between">
                    <span>{metric.label}</span>
                    <span
