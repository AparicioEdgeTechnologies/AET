import React, { useState } from 'react';
import { Shield, Search, AlertCircle, Check, X, Globe, 
  Server, Database, Cloud } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardDescription, 
  CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';

export default function SecurityScanner() {
  const [scanUrl, setScanUrl] = useState('');
  const [scanType, setScanType] = useState('WEB');
  const [scanning, setScanning] = useState(false);
  const [scanResults, setScanResults] = useState(null);
  const [error, setError] = useState('');

  const scanTypes = [
    { id: 'WEB', name: 'Web', icon: Globe, description: 'Análisis de aplicaciones web y API' },
    { id: 'NETWORK', name: 'Red', icon: Server, description: 'Escaneo de infraestructura de red' },
    { id: 'SYSTEM', name: 'Sistema', icon: Database, description: 'Análisis de configuración del sistema' },
    { id: 'CONTAINER', name: 'Contenedor', icon: Cloud, description: 'Escaneo de contenedores Docker' }
  ];

  const handleScan = async () => {
    try {
      setError('');
      setScanning(true);
      
      const response = await fetch('/api/scanner/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          url: scanUrl,
          type: scanType,
          options: {
            depth: 'full',
            timeout: 300000,
            concurrent: true,
            includePorts: [80, 443, 8080, 8443]
          }
        })
      });

      if (!response.ok) {
        throw new Error('Error al iniciar el escaneo');
      }

      const { scanId } = await response.json();
      await monitorScan(scanId);
    } catch (error) {
      setError(error.message);
    } finally {
      setScanning(false);
    }
  };

  const monitorScan = async (scanId: string) => {
    const interval = setInterval(async () => {
      try {
        const response = await fetch(`/api/scanner/status/${scanId}`);
        const result = await response.json();

        if (result.status === 'COMPLETED' || result.status === 'FAILED') {
          clearInterval(interval);
          setScanResults(result);
        }
      } catch (error) {
        clearInterval(interval);
        setError('Error al monitorear el escaneo');
      }
    }, 2000);
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Escáner de Seguridad</h1>
        <p className="text-gray-500">
          Analice su infraestructura en busca de vulnerabilidades
        </p>
      </div>

      {/* Selector de tipo de escaneo */}
      <div className="grid md:grid-cols-4 gap-4 mb-8">
        {scanTypes.map((type) => (
          <Card 
            key={type.id}
            className={`cursor-pointer transition-all ${
              scanType === type.id 
                ? 'ring-2 ring-purple-500 bg-purple-50' 
                : 'hover:bg-gray-50'
            }`}
            onClick={() => setScanType(type.id)}
          >
            <CardHeader>
              <type.icon className={`w-8 h-8 ${
                scanType === type.id ? 'text-purple-500' : 'text-gray-400'
              }`} />
              <CardTitle className="text-lg">{type.name}</CardTitle>
              <CardDescription>{type.description}</CardDescription>
            </CardHeader>
          </Card>
        ))}
      </div>

      {/* Formulario de escaneo */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Iniciar Nuevo Escaneo</CardTitle>
          <CardDescription>
            Ingrese la URL o dirección IP del objetivo
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4">
            <Input
              value={scanUrl}
              onChange={(e) => setScanUrl(e.target.value)}
              placeholder="https://ejemplo.com"
              className="flex-1"
            />
            <Button
              onClick={handleScan}
              disabled={scanning || !scanUrl}
              className="gap-2"
            >
              {scanning ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent" />
                  Escaneando...
                </>
              ) : (
                <>
                  <Search className="w-4 h-4" />
                  Iniciar Escaneo
                </>
              )}
            </Button>
          </div>

          {error && (
            <Alert variant="destructive" className="mt-4">
              <AlertCircle className="w-4 h-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Resultados del escaneo */}
      {scanResults && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-6 h-6 text-purple-500" />
              Resultados del Escaneo
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-4 gap-4 mb-6">
              <div className="p-4 bg-gray-50 rounded-lg">
                <div className="text-sm text-gray-500">Total Vulnerabilidades</div>
                <div className="text-2xl font-bold">{scanResults.metrics.total}</div>
              </div>
              <div className="p-4 bg-red-50 rounded-lg">
                <div className="text-sm text-red-500">Críticas</div>
                <div className="text-2xl font-bold text-red-600">
                  {scanResults.metrics.critical}
                </div>
              </div>
              <div className="p-4 bg-orange-50 rounded-lg">
                <div className="text-sm text-orange-500">Altas</div>
                <div className="text-2xl font-bold text-orange-600">
                  {scanResults.metrics.high}
                </div>
              </div>
              <div className="p-4 bg-yellow-50 rounded-lg">
                <div className="text-sm text-yellow-500">Medias</div>
                <div className="text-2xl font-bold text-yellow-600">
                  {scanResults.metrics.medium}
                </div>
              </div>
            </div>

            <div className="space-y-4">
              {scanResults.vulnerabilities.map((vuln) => (
                <Card key={vuln.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg flex items-center gap-2">
                        <AlertCircle className={`w-5 h-5 ${
                          vuln.severity === 'CRITICAL' ? 'text-red-500' :
                          vuln.severity === 'HIGH' ? 'text-orange-500' :
                          vuln.severity === 'MEDIUM' ? 'text-yellow-500' :
                          'text-blue-500'
                        }`} />
                        {vuln.name}
                      </CardTitle>
                      <span className={`px-2 py-1 rounded-full text-sm ${
                        vuln.severity === 'CRITICAL' ? 'bg-red-100 text-red-700' :
                        vuln.severity === 'HIGH' ? 'bg-orange-100 text-orange-700' :
                        vuln.severity === 'MEDIUM' ? 'bg-yellow-100 text-yellow-700' :
                        'bg-blue-100 text-blue-700'
                      }`}>
                        {vuln.severity}
                      </span>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4">{vuln.description}</p>
                    <div className="space-y-2">
                      <div className="flex items-start gap-2">
                        <AlertCircle className="w-5 h-5 text-red-500 mt-1" />
