import React, { useState, useEffect } from 'react';
import { Cpu, Activity, Zap, Binary, Maximize, RefreshCw } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';

export default function QuantumSystemDashboard() {
  const [quantumState, setQuantumState] = useState(null);
  const [evolutionMetrics, setEvolutionMetrics] = useState([]);
  const [optimizationStatus, setOptimizationStatus] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeQuantumMonitoring = async () => {
      try {
        // Inicializar sistema cuántico
        await initializeQuantumSystem();
        
        // Comenzar monitoreo en tiempo real
        startRealTimeMonitoring();
        
        // Cargar datos iniciales
        await loadInitialData();
      } catch (error) {
        console.error('Error initializing quantum system:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeQuantumMonitoring();
  }, []);

  const initializeQuantumSystem = async () => {
    const ws = new WebSocket(`${process.env.NEXT_PUBLIC_WS_URL}/quantum`);
    
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      switch (data.type) {
        case 'quantum_state':
          setQuantumState(data.state);
          break;
        case 'evolution':
          setEvolutionMetrics(prev => [...prev, data.metrics].slice(-100));
          break;
        case 'optimization':
          setOptimizationStatus(data.status);
          break;
      }
    };

    return () => ws.close();
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" />
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-3xl font-bold mb-8">Sistema Cuántico</h1>

      {/* Estado del Sistema */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Cpu className="w-5 h-5" />
              Estado Cuántico
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span>Qubits Activos</span>
                <span className="font-bold">{quantumState?.activeQubits}</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Entrelazamiento</span>
                <span className="font-bold">{quantumState?.entanglementLevel}%</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Coherencia</span>
                <span className="font-bold">{quantumState?.coherence}%</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Activity className="w-5 h-5" />
              Rendimiento
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span>Optimización</span>
                <span className="font-bold">{optimizationStatus?.efficiency}%</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Velocidad</span>
                <span className="font-bold">{optimizationStatus?.speed} op/s</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Precisión</span>
                <span className="font-bold">{optimizationStatus?.accuracy}%</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="w-5 h-5" />
              Evolución
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span>Generación</span>
                <span className="font-bold">{evolutionMetrics?.generation}</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Mejora</span>
                <span className="font-bold">+{evolutionMetrics?.improvement}%</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Adaptación</span>
                <span className="font-bold">{evolutionMetrics?.adaptationRate}%</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Gráficos de Evolución */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Evolución del Sistema</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={evolutionMetrics}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="timestamp" />
                  <YAxis />
                  <Tooltip />
                  <Line 
                    type="monotone" 
                    dataKey="efficiency" 
                    stroke="#8b5cf6" 
                    strokeWidth={2} 
                  />
                  <Line 
                    type="monotone"
