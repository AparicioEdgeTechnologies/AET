import React, { useState, useEffect } from 'react';
import { Shield, Check, CreditCard, AlertCircle, ArrowRight } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { PLANS } from '@/lib/stripe/config';

export default function SubscriptionManagement() {
  const [loading, setLoading] = useState(true);
  const [currentPlan, setCurrentPlan] = useState<any>(null);
  const [error, setError] = useState('');
  const [processingPayment, setProcessingPayment] = useState(false);

  useEffect(() => {
    loadSubscriptionData();
  }, []);

  const loadSubscriptionData = async () => {
    try {
      const response = await fetch('/api/subscription/status');
      const data = await response.json();
      setCurrentPlan(data);
    } catch (error) {
      setError('Error al cargar información de suscripción');
    } finally {
      setLoading(false);
    }
  };

  const handleUpgrade = async (planId: string) => {
    try {
      setProcessingPayment(true);
      const response = await fetch('/api/subscription/upgrade', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ planId })
      });

      if (!response.ok) {
        throw new Error('Error al procesar el pago');
      }

      const { url } = await response.json();
      window.location.href = url;
    } catch (error) {
      setError(error.message);
    } finally {
      setProcessingPayment(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" />
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      {/* Estado actual de la suscripción */}
      {currentPlan && (
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Plan Actual</CardTitle>
            <CardDescription>
              Estado de su suscripción
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-2xl font-bold">{currentPlan.plan.name}</h3>
                <p className="text-gray-500">
                  ${currentPlan.plan.price}/mes
                </p>
              </div>
              <div className="text-right">
                <div className={`inline-flex items-center px-3 py-1 rounded-full ${
                  currentPlan.isActive 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {currentPlan.isActive ? 'Activo' : 'Inactivo'}
                </div>
                <p className="text-sm text-gray-500 mt-1">
                  {currentPlan.daysRemaining} días restantes
                </p>
              </div>
            </div>

            {/* Límites de uso */}
            <div className="mt-6 space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Escaneos mensuales</span>
                <span className="font-medium">
                  {currentPlan.plan.limits.scansPerMonth === -1 
                    ? 'Ilimitados' 
                    : currentPlan.plan.limits.scansPerMonth}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Usuarios por organización</span>
                <span className="font-medium">
                  {currentPlan.plan.limits.usersPerOrg === -1
                    ? 'Ilimitados'
                    : currentPlan.plan.limits.usersPerOrg}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Retención de datos</span>
                <span className="font-medium">
                  {currentPlan.plan.limits.retentionDays} días
                </span>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Planes disponibles */}
      <div className="grid md:grid-cols-3 gap-8">
        {Object.values(PLANS).map((plan) => (
          <Card 
            key={plan.id}
            className={`relative ${
              currentPlan?.plan.id === plan.id 
                ? 'ring-2 ring-purple-500' 
                : ''
            }`}
          >
            {currentPlan?.plan.id === plan.id && (
              <div className="absolute top-0 right-0 bg-purple-500 text-white px-4 py-1 rounded-bl-lg rounded-tr-lg">
                Plan Actual
              </div>
            )}
            
            <CardHeader>
              <CardTitle>{plan.name}</CardTitle>
              <CardDescription>
                <span className="text-3xl font-bold">${plan.price}</span>
                <span className="text-gray-500">/mes</span>
              </CardDescription>
            </CardHeader>

            <CardContent>
              <ul className="space-y-3">
                {plan.features.map((feature,
